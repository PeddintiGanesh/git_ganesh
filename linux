//prime number

 #!/bin/Bash
 
echo -e "enter number :"
read n
for (( i = 2; i < = $n/2; i++ ))
do
ans = $((n%i))
if[$ans -eq 0]
then
echo "$n is not a prime number"
exit 0
fi
done
echo "$n is a prime number"

//fibonacci

echo "enter number of series :"
read n
a=0
b=1
echo "the fibonacci series is :"
for((i=0;i<n;i++))
do
echo -n "$a"
fn =$((a+b))
a=$b
b=$fn
done

//armstrong 

echo "enter the number"
read n
q=$n
a=0
while [$q-gt 0]
do
r= 'expr $q % 10'
q= 'expr $q % 10'
a= 'expr $a + $r /* $r /*$r'
done 
if [$a=$n]
then
echo "the number $n is armstrong"
else
echo "the number $n is not armstrong"
fi

//palindrome

read -p “Enter a string: ” input_string

# Reverse the string and compare with the original

if [[ “$input_string” == “$(rev <<< “$input_string”)” ]]; then
echo “The entered string ‘$input_string’ is a palindrome.”
else
echo “The entered string ‘$input_string’ is not a palindrome.”
fi

//awk file

awk '{
  sum = 0
  for (i = 2; i <= NF; i++) {
    sum += $i
  }
  avg = sum / (NF - 1)
  print "Student ID:", $1, "Sum:", sum, "Average:", avg
}' marks.txt

//student marks
echo "enter your name and number"
read name num
echo "enter your five subjects marks"
read sub1
read sub2
read sub3
read sub4
read sub5
total=`expr $sub1 + $sub2 + $sub3 + $sub4 + $sub5`
avg=`expr $total / 5`
echo "$name \t $num"
if [ $avg -ge 80 ]
then
echo "grade A"
elif [ $avg -ge 70 -a $avg -lt 80  ]
then
echo "grade B"
elif [ $avg -ge 60 -a $avg -lt 70 ]
then
echo "grade C"
elif [ $avg -ge 50 -a $avg -lt 60 ]
then
echo "grade D"
elif  [ $avg -ge 40 -a $avg -lt 50 ]
then
echo " grade E"
else
echo "grade F"
fi

//Unix ls


 #include < unistd.h >
 #include < stdio.h >
 #include < sys/ stat.h >
 #include < sys/ types.h >
 #include < stdlib.h >
 void main ()
 {
 int pid;
 pid = fork ();
 if (pid < 0)
 {
 printf (" \ n child process creation failed ");
 exit (-1);
 }
 else if (pid == 0)
 {
 execlp ("/ bin/ ls ", " ls ", " - 1 ", NULL);
 }
 else
 {
 wait (NULL);
 printf (" \ n child process completed ");
 exit (0);
 }
 }
